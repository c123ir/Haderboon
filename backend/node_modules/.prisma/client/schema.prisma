// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects         Project[]
  documents        Document[]
  documentVersions DocumentVersion[]
  tags             Tag[]
  aiSessions       AISession[]
  aiMessages       AIMessage[]
  AIApiKey         AIApiKey[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  DEVELOPER
}

model Project {
  id            String   @id @default(cuid())
  name          String
  description   String?
  repositoryUrl String? // اضافه کردن این فیلد
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]

  @@map("projects")
}

// تعریف مدل Document اضافه شد
model Document {
  id        String   @id @default(cuid())
  title     String
  content   String?
  type      String? // مثال: "markdown", "code_snippet", "diagram"
  status    String   @default("draft") // مثال: "draft", "published", "archived"
  parentId  String? // برای ساختار درختی مستندات
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String?

  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project?          @relation(fields: [projectId], references: [id], onDelete: SetNull)
  parent   Document?         @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children Document[]        @relation("DocumentHierarchy")
  versions DocumentVersion[]
  tags     DocumentTag[]

  @@map("documents")
}

// مدل نسخه‌بندی مستندات
model DocumentVersion {
  id            String   @id @default(cuid())
  versionNumber Int
  title         String
  content       String
  changelog     String? // توضیحات تغییرات
  isPublished   Boolean  @default(false)
  createdAt     DateTime @default(now())
  documentId    String
  userId        String

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

// مدل تگ‌ها
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?  @default("#3B82F6") // رنگ پیش‌فرض آبی
  createdAt DateTime @default(now())
  userId    String

  // Relations
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents DocumentTag[]

  @@map("tags")
}

// جدول رابطه many-to-many بین Document و Tag
model DocumentTag {
  documentId String
  tagId      String

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([documentId, tagId])
  @@map("document_tags")
}

model AIProvider {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String? // اضافه کردن این فیلد
  baseUrl     String?
  priority    Int      @default(0) // اضافه کردن این فیلد
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  apiKeys  AIApiKey[]
  models   AIModel[]
  sessions AISession[]

  @@map("ai_providers")
}

model AIModel {
  id           String   @id @default(cuid())
  name         String
  displayName  String
  description  String?
  maxTokens    Int?
  contextSize  Int?     @default(4096)
  capabilities String[] @default([])
  settings     Json? // اضافه کردن این فیلد
  priority     Int      @default(0) // اضافه کردن این فیلد
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  providerId   String

  // Relations
  provider AIProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  sessions AISession[]

  @@map("ai_models")
}

model AIApiKey {
  id         String    @id @default(cuid())
  name       String
  keyValue   String // این فیلد موجود است
  isActive   Boolean   @default(true)
  expiresAt  DateTime? // اضافه کردن این فیلد
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  providerId String
  userId     String

  // Relations
  provider AIProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_api_keys")
}

// تعریف تکراری AIModel حذف شد
// model AIModel {
//   id           String   @id @default(cuid())
//   name         String
//   displayName  String
//   description  String?
//   maxTokens    Int?
//   contextSize  Int?     @default(4096) // اضافه کردن این فیلد
//   capabilities String[] @default([])
//   isActive     Boolean  @default(true)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   providerId   String

//   // Relations
//   provider AIProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
//   sessions AISession[]

//   @@map("ai_models")
// }

model AISession {
  id         String   @id @default(cuid())
  title      String?
  status     String   @default("active")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  providerId String
  modelId    String

  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider AIProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  model    AIModel     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  messages AIMessage[]

  @@map("ai_sessions")
}

model AIMessage {
  id        String   @id @default(cuid())
  content   String
  role      String // "user" | "assistant" | "system"
  createdAt DateTime @default(now())
  sessionId String
  userId    String

  // Relations
  session AISession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_messages")
}
