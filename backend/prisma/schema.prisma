generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  username          String            @unique
  password          String
  firstName         String?
  lastName          String?
  role              UserRole          @default(USER)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  aiApiKeys         AIApiKey[]
  ai_messages       ai_messages[]
  ai_sessions       ai_sessions[]
  document_versions DocumentVersion[]
  documents         Document[]
  projects          Project[]
  tags              Tag[]

  @@map("users")
}

model Project {
  id            String     @id @default(cuid())
  name          String
  description   String?
  status        String     @default("active")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String
  repositoryUrl String?
  documents     Document[]
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Document {
  id        String            @id @default(cuid())
  title     String
  content   String?
  type      String?
  status    String            @default("draft")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  projectId String?
  parentId  String?
  tags      DocumentTag[]
  versions  DocumentVersion[]
  parent    Document?         @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children  Document[]        @relation("DocumentHierarchy")
  project   Project?          @relation(fields: [projectId], references: [id])
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model DocumentVersion {
  id            String   @id @default(cuid())
  versionNumber Int
  title         String
  content       String
  changelog     String?
  isPublished   Boolean  @default(false)
  createdAt     DateTime @default(now())
  documentId    String
  userId        String
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  color     String?       @default("#3B82F6")
  createdAt DateTime      @default(now())
  userId    String
  documents DocumentTag[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tags")
}

model DocumentTag {
  documentId String
  tagId      String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([documentId, tagId])
  @@map("document_tags")
}

model AIProvider {
  id          String        @id @default(cuid())
  name        String        @unique
  displayName String
  baseUrl     String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  priority    Int           @default(0)
  apiKeys     AIApiKey[]
  ai_models   ai_models[]
  ai_sessions ai_sessions[]

  @@map("ai_providers")
}

model AIApiKey {
  id         String     @id @default(cuid())
  name       String
  keyValue   String
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  providerId String
  userId     String
  expiresAt  DateTime?
  provider   AIProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_api_keys")
}

model ai_messages {
  id          String      @id
  content     String
  role        String
  createdAt   DateTime    @default(now())
  sessionId   String
  userId      String
  ai_sessions ai_sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  users       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ai_models {
  id           String        @id
  name         String
  displayName  String
  description  String?
  maxTokens    Int?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  providerId   String
  capabilities String[]      @default([])
  contextSize  Int?          @default(4096)
  priority     Int           @default(0)
  settings     Json?
  ai_providers AIProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  ai_sessions  ai_sessions[]
}

model ai_sessions {
  id           String        @id
  title        String?
  status       String        @default("active")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  userId       String
  providerId   String
  modelId      String
  ai_messages  ai_messages[]
  ai_models    ai_models     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  ai_providers AIProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  users        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  DEVELOPER
}
